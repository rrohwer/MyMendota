}
specify.date.range <- function(AllDates, StartDate, EndDate, TaxaList){
sample.dates <- AllDates
start.date <- StartDate
end.date <- EndDate
taxa.list <- TaxaList
start.date <- parse_date_time(x = start.date, orders = "mdy", tz = "Etc/GMT-5")
end.date <- parse_date_time(x = end.date, orders = "mdy", tz = "Etc/GMT-5")
dates.index <- which(sample.dates >= start.date & sample.dates <= end.date)
chosen.taxa.list <- list(NULL)
for (t in highest.taxa.level:lowest.taxa.level){
chosen.taxa.list[t] <- taxa.list[t]
for (n in 1:length(taxa.list[[t]])){
chosen.taxa.list[[t]][[n]] <- taxa.list[[t]][[n]][dates.index]
}
}
return(chosen.taxa.list)
}
specify.connected.points <- function(SampleDates, NamesAndAbundsList, top.level, low.level){
sample.dates <- SampleDates
taxa.list <- NamesAndAbundsList
highest.taxa.level <- top.level
lowest.taxa.level <- low.level
# first figure out the segments of dates to connect with lines (connect april-september only):
lines.list <- list(NULL)
years.vector <- unique(year(sample.dates))
for (y in 1:length(years.vector)){
index.1 <- which(year(sample.dates) == years.vector[y])
lines.list[[y]] <- sample.dates[index.1]
index.2 <- which(month(lines.list[[y]]) > 3 & month(lines.list[[y]]) < 12)
lines.list[[y]] <- lines.list[[y]][index.2]
names(lines.list)[y] <- years.vector[y]
}
# then create the corresponding segments of abundance data
# t = taxa level, n = unique taxa name, y = year of sample, d = sample date
taxa.lines <- taxa.list
for (t in highest.taxa.level:lowest.taxa.level){
for (n in 1:length(taxa.lines[[t]])){
all.dates.in.name <- parse_date_time(names(taxa.list[[t]][[n]]), orders = "mdy", tz = "Etc/GMT-5")
temp.list <- list(NULL)
for (y in 1:length(lines.list)){
index <- NULL
for(d in 1:length(lines.list[[y]])){
index <- c(index, which(all.dates.in.name == lines.list[[y]][d]))
}
temp.list[[y]] <- taxa.list[[t]][[n]][index]
names(temp.list)[y] <- names(lines.list)[y]
}
taxa.lines[[t]][[n]] <- temp.list
}
}
return(taxa.lines)
}
specify.season.dates <- function(SampleDates, SeasonStart, SeasonEnd){
season.start <-SeasonStart
season.end <- SeasonEnd
all.dates <- SampleDates
all.years <- unique(year(all.dates))
season.dates <- NULL
start.m <- month(parse_date_time(x = season.start, orders = "md"))
end.m <- month(parse_date_time(x = season.end, orders = "md"))
if (start.m > end.m){ # winter seasons span 2 different years
start.y <- paste(season.start, all.years[1], sep = "-")
season.dates <- c(start.y, start.y)
for (y in 2:(length(all.years) - 1)){
end.y <- paste(season.end, all.years[y], sep = "-")
start.y <- paste(season.start, all.years[y], sep = "-")
season.dates <- c(season.dates, end.y, end.y, start.y, start.y)
}
end.y <- paste(season.end, max(all.years), sep = "-")
season.dates <- c(season.dates, end.y, end.y)
}else{
for (y in 1:length(all.years)){
start.y <- paste(season.start, all.years[y], sep = "-")
end.y <- paste(season.end, all.years[y], sep = "-")
season.dates <- c(season.dates, start.y, start.y, end.y, end.y)
}
}
season.dates <- parse_date_time(x = season.dates, orders = "mdy", tz = "Etc/GMT-5")
return(season.dates)
}
find.overall.abund.for.taxa <- function(TaxaList, top.level, low.level){
taxa.list <- TaxaList
# recall that taxa.list values are already percents, not reads
taxa.aves <- taxa.list
for (t in top.level:low.level){
for (n in 1:length(taxa.list[[t]])){
taxa.aves[[t]][[n]] <- mean(taxa.list[[t]][[n]])
names(taxa.aves[[t]])[n] <- names(taxa.list[[t]])[n]
}
}
return(taxa.aves)
}
# ---- Use Functions ---- --------------------------------------------------------------------------------------
# these variables ared used inside functions, lazy call from global environment. Don't change them!
grouped <- import.grouped.data(FolderPath = grouped.taxa.folder.path.workflow)
tot.reads <- sum(grouped[[8]][ ,9])
sample.dates <- parse_date_time(colnames(grouped[[2]][3:ncol(grouped[[2]])]), orders = "mdy", tz = "Etc/GMT-5")
# ==========================================
# ===
==========================================
# ==== Change Variables in This Section ====
shade <- TRUE
gap.winter <- FALSE
grey.season <- TRUE
season.start <- "8-1"
season.end <- "9-1"
date.range <- FALSE
start.date <- "5-1-00"
end.date <- "11-1-04"
parent.taxon.name <- "p_Cyanobacteria"
highest.taxa.level <- 2            # this must match the level of the parent.taxon.name
lowest.taxa.level <- 7
plot.taxa.levels <- c(2:7)
perc.abund.cutoff <- .01             # if your cutoff leaves nothing in a plotted level it throws an error, fix by lowering cutoff
# ==========================================
# ==========================================
# make plot ----
plotted <- plot.the.cascading.abundances(top.name = parent.taxon.name, taxa.levels = plot.taxa.levels, NamesAndAbundsList = taxa.list, abund.cutoff = perc.abund.cutoff,
SampleDates = chosen.dates, Shading = shade, LineGaps = taxa.lines, Seasons = season.dates)
# ---- Exam
==============================
# generate data based on your variables ----
taxa.list <- collect.names.and.abunds.into.nested.lists(top.name = parent.taxon.name, top.level = highest.taxa.level, low.level = lowest.taxa.level, abund.cutoff = perc.abund.cutoff, Grouped = grouped)
if (date.range){
taxa.list <- specify.date.range(AllDates = sample.dates, StartDate = start.date, EndDate = end.date, TaxaList = taxa.list)
chosen.dates <- parse_date_time(names(taxa.list[[highest.taxa.level]][[1]]), orders = "mdy", tz = "Etc/GMT-5")
}else{
chosen.dates <- sample.dates
}
if (gap.winter){
taxa.lines <- specify.connected.points(SampleDates = chosen.dates, NamesAndAbundsList = taxa.list, top.level = highest.taxa.level, low.level = lowest.taxa.level)
}else{
taxa.lines <- NULL
}
if (grey.season){
season.dates <- specify.season.dates(SampleDates = chosen.dates, SeasonStart = season.start, SeasonEnd = season.end)
}else{
season.dates <- NULL
}
# make plot ----
plotted <- plot.the.cascading.abundances(top.name = parent.taxon.name, taxa.levels = plot.taxa.levels, NamesAndAbundsList = taxa.list, abund.cutoff = perc.abund.cutoff,
SampleDates = chosen.dates, Shading = shade, LineGaps = taxa.lines, Seasons = season.dates)
taxa.list <- collect.names.and.abunds.into.nested.lists(top.name = parent.taxon.name, top.level = highest.taxa.level, low.level = lowest.taxa.level, abund.cutoff = perc.abund.cutoff, Grouped = grouped)
plot.taxa.levels <- c(2:3)
taxa.list <- collect.names.and.abunds.into.nested.lists(top.name = parent.taxon.name, top.level = highest.taxa.level, low.level = lowest.taxa.level, abund.cutoff = perc.abund.cutoff, Grouped = grouped)
e
plot.taxa.levels <- c(2)
taxa.list <- collect.names.and.abunds.into.nested.lists(top.name = parent.taxon.name, top.level = highest.taxa.level, low.level = lowest.taxa.level, abund.cutoff = perc.abund.cutoff, Grouped = grouped)
parent.taxon.name <- "p__Cyanobacteria"
highest.taxa.level <- 2            # this must match the level of the parent.taxon.name
lowest.taxa.level <- 7
plot.taxa.levels <- c(2)
perc.abund.cutoff <- .01             # if your cutoff leaves nothing in a plotted level it throws an error, fix by lowering cutoff
# ==========================================
# ==========================================
# generate data based on your variables ----
taxa.list <- collect.names.and.abunds.into.nested.lists(top.name = parent.taxon.name, top.level = highest.taxa.level, low.level = lowest.taxa.level, abund.cutoff = perc.abund.cutoff, Grouped = grouped)
if (date.range){
taxa.list <- specify.date.range(AllDates = sample.dates, StartDate = start.date, EndDate = end.date, TaxaList = taxa.list)
chosen.dates <- parse_date_time(names(taxa.list[[highest.taxa.level]][[1]]), orders = "mdy", tz = "Etc/GMT-5")
}else{
chosen.dates <- sample.dates
}
if (gap.winter){
taxa.lines <- specify.connected.points(SampleDates = chosen.dates, NamesAndAbundsList = taxa.list, top.level = highest.taxa.level, low.level = lowest.taxa.level)
}else{
taxa.lines <- NULL
}
if (grey.season){
season.dates <- specify.season.dates(SampleDates = chosen.dates, SeasonStart = season.start, SeasonEnd = season.end)
}else{
season.dates <- NULL
}
# make plot ----
plotted <- plot.the.cascading.abundances(top.name = parent.taxon.name, taxa.levels = plot.taxa.levels, NamesAndAbundsList = taxa.list, abund.cutoff = perc.abund.cutoff,
SampleDates = chosen.dates, Shading = shade, LineGaps = taxa.lines, Seasons = season.dates)
plotted <- plot.the.cascading.abundances(top.name = parent.taxon.name, taxa.levels = plot.taxa.levels, NamesAndAbundsList = taxa.list, abund.cutoff = perc.abund.cutoff,
SampleDates = chosen.dates, Shading = shade, LineGaps = taxa.lines, Seasons = season.dates)
library("dplyr")
library("tidy")
install.packages("tidy")
install.packages(c("BH", "colorspace", "curl", "dataRetrieval", "DBI", "dendextend", "digest", "dplyr", "evaluate", "fields", "formatR", "highr", "httr", "jsonlite", "knitr", "lazyeval", "lubridate", "maps", "mime", "openssl", "permute", "plyr", "R6", "Rcpp", "readr", "reshape", "reshape2", "rmarkdown", "shiny", "shinyFiles", "spam", "SparseM", "stringi", "stringr", "vegan"))
library("dplyr")
library("tidy")
install.packages("tidy")
library("tidyr")
install.packages("tidyr")
library("tidyr")
library("ggplot")
library("ggplot2")
x <- read.csv("~/Desktop/gapminder_all.csv")
View(x)
gdp_1997 <- select(x, gdp_Percap_1997)
str(x)
gdp_1997 <- select(x, gdp_Percap_1997)
gdp_1997 <- select(x, gdpPercap_1997)
attach[data]
attach[x]
attach(x)
africa <- filter(data, continent == "Africa")
africa <- filter(x, continent == "Africa")
gdp_1997 <- select(africa, gdpPercap_1997)
gdp_1997 <- select(africa, country, gdpPercap_1997)
gdp_1997 <- select(x, gdpPercap_1997)
View(gdp_1997)
africa <- filter(x, continent == "Africa")
View(africa)
gdp_1997 <- select(africa, gdpPercap_1997)
View(gdp_1997)
gdp_1997 <- select(africa, country, gdpPercap_1997)
gdp_1997 <- select(x, gdpPercap_1997)
africa <- filter(x, continent == "Africa")
gdp_1997 <- select(africa, country, gdpPercap_1997)
View(gdp_1997)
?group_by
af.ave <- select(x, continent, country, gdpPercap_1997)
View(af.ave)
af.ave <- group_by(af.ave, continent)
af.ave
gdp_1997 <- select(x, gdpPercap_1997)
gdp_1997 <- select(x, gdpPercap_1997)
gdp_1997_cont <- group_by(gdp_1997, continent)
gdp_1997_cont <- group_by(gdp_1997, Continent)
str(gdp_1997)
library("dplyr")
library("tidyr")
library("ggplot2")
x <- read.csv("~/Desktop/gapminder_all.csv")
africa_by_continent <- group_by(africa, "continent")
africa <- filter(x, continent == "Africa")
africa_by_continent <- group_by(africa, "continent")
View(africa_by_continent)
summarize(africa_by_continent, ave_gdp1997 = mean(gdpPercap_1977))
View(africa)
View(africa_by_continent)
View(africa)
View(africa_by_continent)
x <- read.csv("~/Desktop/gapminder_all.csv")
data_by_continent <- group_by(x, "continent")
summarize(data_by_continent, ave_gdp1997 = mean(gdpPercap_1977))
View(data_by_continent)
summarize(data_by_continent, ave_gdp1997 = mean(gdpPercap_1977))
x <- read.csv("~/Desktop/gapminder_all.csv")
data_by_continent <- group_by(x, "Continent")
summarize(data_by_continent, ave_gdp1997 = mean(gdpPercap_1977))
View(data_by_continent)
View(x)
View(x)
View(data_by_continent)
x <- read.csv("~/Desktop/gapminder_all.csv")
data_by_continent <- group_by(x, "Continent")
all.equal(x, data_by_continent)
x <- read.csv("~/Desktop/gapminder_all.csv")
data_by_continent <- group_by(x, "Continent")
str(x)
data_by_continent <- group_by(x, "continent")
summarize(data_by_continent, ave_gdp1997 = mean(gdpPercap_1977))
x <- read.csv("~/Desktop/gapminder_all.csv")
data_by_continent <- group_by(x, "continent")
data_by_continent <- group_by(x, continent)
summarize(data_by_continent, ave_gdp1997 = mean(gdpPercap_1977))
africa <- filter(x, continent == "Africa")
ggplot(africa, aes(log10(pop_2007)))
geom_histogram()
ggplot(africa, aes(log10(pop_2007))) +
geom_histogram()
test <- log10(africa$pop_2007)
test <- log10(africa$pop_2007)
ggplot(test) +
geom_histogram()
ggplot(africa, aes(log10(pop_2007))) +
geom_histogram() +
labs(x = "Log10( 2007 Population )")
ggplot(africa, aes(log10(pop_2007))) +
geom_histogram() +
labs(x = "Log10( 2007 Population )")
test <- log10(africa$pop_2007)
test
ggplot(test) +
geom_histogram()
test <- data.frame(log10(africa$pop_2007))
test
test <- data.frame(p = log10(africa$pop_2007))
ggplot(test, aes(p)) +
geom_histogram()
ggplot(africa, aes(log10(pop_2007))) +
geom_histogram() +
labs(x = "Log10( 2007 Population )")
ggplot(africa, aes(log10(pop_2007))) +
geom_histogram() +
labs(x = "Log10( 2007 Population )") +
lims(x=c(-10, 10000))
ggplot(africa, aes(pop_2007, gdpPercap_2007))) +
geom_point()
ggplot(africa, aes(pop_2007, gdpPercap_2007))) +
ggplot(africa, aes(pop_2007, gdpPercap_2007)) +
geom_point()
ggplot(africa, aes(pop_2007, gdpPercap_2007)) +
geom_point() + # scatter plot
geom_smooth(method="lm")
ggplot(africa, aes(pop_2007, gdpPercap_2007)) +
geom_point() + # scatter plot
geom_smooth(method="lm") + # add linear regression line
theme_classic() # remove the grids
ggplot(africa, aes(pop_2007, gdpPercap_2007)) +
geom_point(color=Continent) + # scatter plot
geom_smooth(method="lm") + # add linear regression line
theme_classic() # remove the grids
ggplot(africa, aes(pop_2007, gdpPercap_2007, color=Continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm") + # add linear regression line
theme_classic() # remove the grids
ggplot(africa, aes(pop_2007, gdpPercap_2007, color=continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm") + # add linear regression line
theme_classic() # remove the grids
ggplot(x, aes(pop_2007, gdpPercap_2007, color=continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm") + # add linear regression line
theme_classic() # remove the grids
ggplot(x, aes(pop_2007, gdpPercap_2007, color=continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm", color="black") + # add linear regression line, and change from default aes color
theme_classic() # remove the grids
ggplot(x, aes(log(pop_2007), log(gdpPercap_2007), color=continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm", color="black") + # add linear regression line, and change from default aes color
theme_classic() # remove the grids
ggplot(x, aes(log(pop_2007), log(gdpPercap_2007), color=continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm") + # add linear regression line, and change from default aes color
theme_classic() # remove the grids
ggplot(x, aes(log(pop_2007), log(gdpPercap_2007), color=continent)) +
geom_point() + # scatter plot
geom_smooth(method="lm", color="black") + # add linear regression line, and change from default aes color
theme_classic() # remove the grids
ggplot(x, aes(log(pop_2007), log(gdpPercap_2007), group=continent)) +
geom_point(aes(color=continent)) + # scatter plot
geom_smooth(method="lm", color="black") + # add linear regression line, and change from default aes color
theme_classic() # remove the grids
source('~/Dropbox/Trina/Coding/R/years_past/scripts/older_stuff/Flowers.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Dropbox/Trina/Coding/R/years_past/scripts/older_stuff/JesseFlowers.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
#axis(side=1, labels=TRUE, tick=TRUE, at=seq(from=0, to=10,by=1))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a <- letters[1:3]
b <- LETTERS[5:20]
c <- 2:7
list(a,b,c)
test <- list(a,b,c)
test
save(test)
?save
save(test, file = "~/Desktop/TEST/test")
save(test, file = "~/Desktop/TEST/test")
rm(test)
load(file = "~/Desktop/TEST/test")
test
rm(test)
test
test2 <- load(file = "~/Desktop/TEST/test")
test2
rm(test)
a <- letters[1:3]
b <- LETTERS[5:20]
c <- 2:7
test <- list(a,b,c)
test
saveRDS(object = test, file = "~/Desktop/TEST/test.rds")
rm(test)
test
readRDS(file = "~/Desktop/TEST/test")
?readRDS
readRDS(tester, file = "~/Desktop/TEST/test")
readRDS(test, file = "~/Desktop/TEST/test")
test <- NULL
readRDS(test, file = "~/Desktop/TEST/test")
readRDS(file = "~/Desktop/TEST/test.rds")
test <- readRDS(file = "~/Desktop/TEST/test.rds")
test
library("tidyr")
library(tidyr)
install.packages("tidyr")
library(tidyr)
?full_join
library(dplyr)
?full_join()
test
str(test)
glimpse(test)
test2 <- matrix(data = 1:1000, ncol = 50)
str(test2)
glimpse(test2)
test2
glimpse(test2)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
par(mfrow = c(2,1)) # plot with 2 rows, 1 column
plot(sample(1:10))
sample(1:10, 30)
sample(1:10, 30)
sample(1:10, 30, replace = T)
plot(x = sample(1:10, 30, replace = T), y = sample(1:10, 30, replace = T))
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers")
par(mfrow = c(2,1),  # plot with 2 rows, 1 column
omd = c(.5,.5,.5,.5), plt = c(.5,.5,.5,.5)) # if start at default, colored boxes overlap
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "1st Plot of Nothing")
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "2nd Plot of Nothing")
par(mfrow = c(2,1),  # plot with 2 rows, 1 column
omd = c(.5,.5,.5,.5), plt = c(.5,.5,.5,.5)) # if start at default, colored boxes overlap
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "1st Plot of Nothing")
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "2nd Plot of Nothing")
par(mfrow = c(2,1),  # plot with 2 rows, 1 column
omd = c(.1,.1,.1,.1), plt = c(.1,.1,.1,.1)) # if start at default, colored boxes overlap
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "1st Plot of Nothing")
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "2nd Plot of Nothing")
?par
par(mfrow = c(2,1),  # plot with 2 rows, 1 column
mai = c(2,2,2,2), omi = c(3,3,3,3)) # R markdown uses inches already
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "1st Plot of Nothing")
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "2nd Plot of Nothing")
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "1st Plot of Nothing")
plot(x = runif(n = 30, min = 0, max = 10), y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "2nd Plot of Nothing")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(x = 1:10, y = runif(n = 30, min = 0, max = 10), ylab = "random numbers", xlab = "random numbers", main = "1st Plot of Nothing")
clear
plot(x = 1:10, y = 1:10, ylab = "numbers", xlab = "numbers", main = "1st Plot")
plot(x = 1:10, y = 1:10, ylab = "numbers", xlab = "numbers", main = "2nd Plot")
shiny::runApp('Dropbox/PhD/2017-4-25 LTER-data sem shiny presentation/PlotPoseidon')
setwd(dir = "PlotPoseidon/")
ysi.file <- "data/example_YSI.csv"
library(shiny)
# trying to use all the tidyverse packages. These are the "core" ones, plus lubridate
library(readr) # reads in data to tibble format
library(ggplot2)
library(tibble)
library(tidyr)
library(purrr)
library(dplyr)
library(lubridate)
# ---- Import and Format data ----
# readr package imports files into tibble format.
# source without col_types and use the copy/paste output to change it.
ysi <- read_csv(file = ysi.file, col_names = T, col_types = cols(
Timestamp = col_character(),
`Barometer (kPA)` = col_double(),
`Specific Conductance (uS/cm)` = col_double(),
`Dissolved Oxygen (mg/L)` = col_double(),
`pH_1 (Units)` = col_double(),
`Temperature (C)` = col_double(),
Comment = col_character(),
Site = col_character(),
Folder = col_double(),
`Unit ID` = col_character()
))
# lubridate seems more reliable and flexible than readr's parse_datetime function.
# use dpylr's piping, well, technically magrittr
ysi$Timestamp <-
ysi %>%
select(Timestamp) %>%
as_vector() %>% # Tibbles don't drop dimensions automatically
parse_date_time(orders = "mdyHMS", tz = "Etc/GMT-5") %>%
floor_date(unit = "day")
ysi <- ysi %>%
mutate(negDepth = Folder * -1)
source('~/.active-rstudio-document', echo=TRUE)
ysi
ysi %>%
filter(Timestamp == parse_date_time(input$sample.day, "ymd", tz="Etc/GMT-5")) %>% # input comes as character?
select(negDepth, Folder, `Temperature (C)`) %>%
ggplot(mapping = aes(x = `Temperature (C)`, y = negDepth)) +
geom_point()
ysi %>%
filter(Timestamp == parse_date_time(unique(ysi$Timestamp)[3], "ymd", tz="Etc/GMT-5")) %>% # input comes as character?
select(negDepth, Folder, `Temperature (C)`) %>%
ggplot(mapping = aes(x = `Temperature (C)`, y = negDepth)) +
geom_point()
ysi %>%
filter(Timestamp == parse_date_time(unique(ysi$Timestamp)[3], "ymd", tz="Etc/GMT-5")) %>% # input comes as character?
select(negDepth, Folder, `Temperature (C)`) %>%
ggplot(mapping = aes(x = `Temperature (C)`, y = negDepth)) +
geom_point() +
labs(x = "Temperature (C)", y = "Depth (m)", title = "Lake Mendota Thermocline")
ysi %>%
filter(Timestamp == parse_date_time(unique(ysi$Timestamp)[3], "ymd", tz="Etc/GMT-5")) %>% # input comes as character?
select(negDepth, Folder, `Temperature (C)`) %>%
ggplot(mapping = aes(x = `Temperature (C)`, y = negDepth)) +
geom_point() +
labs(x = "Temperature (C)", y = "Depth (m)", title = "Lake Mendota Thermocline") +
theme(axis.text.y = Folder)
ysi %>%
filter(Timestamp == parse_date_time(unique(ysi$Timestamp)[3], "ymd", tz="Etc/GMT-5")) %>% # input comes as character?
select(negDepth, Folder, `Temperature (C)`) %>%
ggplot(mapping = aes(x = `Temperature (C)`, y = negDepth)) +
geom_point() +
labs(x = "Temperature (C)", y = "Depth (m)", title = "Lake Mendota Thermocline") +
theme(axis.text.y = negDepth * -1) # does not work. trying to get positive labels
runApp('Dropbox/PhD/2017-4-25 LTER-data sem shiny presentation/PlotPoseidon')
runApp('Dropbox/PhD/2017-4-25 LTER-data sem shiny presentation/PlotPoseidon')
shiny::runApp()
runApp()
